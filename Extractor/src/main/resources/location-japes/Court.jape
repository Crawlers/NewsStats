Phase: Court
Input:  Lookup Token EndSentence
Options: control = appelt

Rule: Court
Priority:50
({Token.string == "arrested"}
|
{Token.string == "remanded"}
|
{Token.string == "seized"}
|
{Token.string == "apprehended"}
|
{Token.string == "brought"}
|
{Token.string == "produced"}
|
{Token.string == "presented"}
|
{Token.string == "charged"}
|
{Token.string == "fined"}
|
{Token.string == "sentenced"})

({Token.kind == "word"}
|
{Token.kind == "number"}
|
{Token.kind == "symbol"}
|
{Token.kind == "punctuation",!EndSentence.rule == endSentence})*

({Token.string == "by"}
|
{Token.string == "before"}
|
{Token.string == "with"}
|
{Token.string == "in"})
    
({Token.string =~ "[Tt]he"}
|
{Token.string =~ "[Aa]"})?

(
	(
		{Token.kind == word, Token.category == NNP, Token.orth == upperInitial}
	)
|
	(
		({Token.kind == word, Token.category == NNP, Token.orth == upperInitial}
		{Token.kind == word, Token.category == NNP, Token.orth == upperInitial})
	)
):location
	
(
	(
		({Token.string =~ "[Mm]agistrate"})
		({Token.kind == punctuation})
		({Token.string == "s"})
		({Token.kind == word, Token.string =~ "[Cc]ourt"})
	)
	|
	(
		{Token.string == "Chief"}
		{Token.string == "Magistrate"}
	)
	|
	(
		{Token.string == "Magistrate"}
	)
	|
	(
		({Token.string =~ "[Hh]igh"})
		({Token.kind == word, Token.string =~ "[Cc]ourt"})
	)	
	|
	(
		{Token.kind == word, Token.string =~ "[Cc]ourt"}
	)
)

--> 
{
	//get the location annotations in a list
	AnnotationSet crimeLocationSet = inputAS.get("CrimeLocation");
	
	List annList = new ArrayList((AnnotationSet)bindings.get("location"));

	//sort the list by offset
	Collections.sort(annList, new OffsetComparator());

	//iterate through the matched annotations
	for(int i = 0; i < annList.size(); i++)
	{
		Annotation anAnn = (Annotation)annList.get(i);
		
		FeatureMap features = Factory.newFeatureMap();
		features.put("location", "Identified");
		
		Node annEnd = anAnn.getEndNode();
		int j;
		
		for(j= i+1; j < annList.size(); j++){
			Annotation anAnnNext = (Annotation)annList.get(j);
			if(anAnnNext.getStartNode().getOffset() == annEnd.getOffset()+1 || anAnnNext.getStartNode().getOffset() == annEnd.getOffset()){
				annEnd = anAnnNext.getEndNode();
			}else{	
				break;
			}
		}

		if(crimeLocationSet.isEmpty()){
			outputAS.add(anAnn.getStartNode(), annEnd, "CrimeLocation", features);
		}
		outputAS.add(anAnn.getStartNode(), annEnd, "Court", features);
	}
}