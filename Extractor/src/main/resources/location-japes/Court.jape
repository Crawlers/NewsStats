Phase: Court
Input:  Lookup Token RealLocation PointSeperator
Options: control = appelt

Rule: Court
Priority:50
({Token.string == "arrested"}
|
{Token.string == "remanded"}
|
{Token.string == "seized"}
|
{Token.string == "apprehended"}
|
{Token.string == "produced"}
|
{Token.string == "charged"}
|
{Token.string == "fined"}
|
{Token.string == "sentenced"})
({!Token.string == "."}
|
{PointSeperator.rule == decPoint})*
({Token.string == "by"}
|
{Token.string == "before"}
|
{Token.string == "with"}
|
{Token.string == "in"})
    
	({Token.string =~ "[Tt]he"}
	|
	{Token.string =~ "[Aa]"})?
	(
	({Token.kind == word, Token.category == NNP, Token.orth == upperInitial})
	|
	 (({Token.kind == word, Token.category == NNP, Token.orth == upperInitial}
	 {Token.kind == word, Token.category == NNP, Token.orth == upperInitial}))
    ):location	
	((({Token.string =~ "[Mm]agistrate"})
	({Token.kind == punctuation})
	({Token.string == "s"})
	({Token.kind == word, Token.string =~ "[Cc]ourt"}))
	|
	({Token.string == "Chief"}
	{Token.string == "Magistrate"})
	|
	({Token.string == "Magistrate"})
	|
	(({Token.string =~ "[Hh]igh"})
	({Token.kind == word, Token.string =~ "[Cc]ourt"}))	
	|
	({Token.kind == word, Token.string =~ "[Cc]ourt"}))
--> 
/*{
if(inputAS.get("CrimeLocation").isEmpty()){
   List annList = new ArrayList((AnnotationSet)bindings.get("location"));


   //sort the list by offset
   Collections.sort(annList, new OffsetComparator());

   //iterate through the matched annotations
   for(int i = 0; i < annList.size(); i++)
   {
      Annotation anAnn = (Annotation)annList.get(i);
	  
	  FeatureMap features = Factory.newFeatureMap();
	  features.put("location", "Court");
	  
	  outputAS.add(anAnn.getStartNode(), anAnn.getEndNode(), "CrimeLocation", features);

   }
   }
   }
   */
   
   
   {
	//get the location annotations in a list
	if(inputAS.get("CrimeLocation").isEmpty()){
   List annList = new ArrayList((AnnotationSet)bindings.get("location"));


   //sort the list by offset
   Collections.sort(annList, new OffsetComparator());

   //iterate through the matched annotations
   for(int i = 0; i < annList.size(); i++)
   {
      Annotation anAnn = (Annotation)annList.get(i);

      // check that the new annotation is not a categorical place
	  try {
		String content = doc.getContent().getContent(anAnn.getStartNode().getOffset(), anAnn.getEndNode().getOffset()).toString();
		  if (!(content.equals("Court") || content.equals("Police") || content.equals("Customs") || content.equals("Custom") || content.equals("Temple") || content.equals("Bank") || content.equals("Institute") || content.equals("Resort") || content.equals("International") || content.equals("Airport") || content.equals("University") || content.equals("Prison") || content.equals("Federal") || content.equals("City") || content.equals("Sri") || content.equals("Ceylon") || content.equals("Ealam") || content.equals("Remand") || content.equals(",") || content.equals("Military") || content.equals("Chief") || content.equals("High"))) // content.equals("Devala")
		  {
			FeatureMap features = Factory.newFeatureMap();
			features.put("location", "Court");
			
			Node annEnd = anAnn.getEndNode();
			int j;
			
			for(j= i+1; j < annList.size(); j++){
				Annotation anAnnNext = (Annotation)annList.get(j);
				if(anAnnNext.getStartNode().getOffset() == annEnd.getOffset()+1 || anAnnNext.getStartNode().getOffset() == annEnd.getOffset()){
					String longContent = doc.getContent().getContent(anAnnNext.getStartNode().getOffset(), anAnnNext.getEndNode().getOffset()).toString();
					if (!(longContent.charAt(0) == ','  || longContent.contains("Military")  || longContent.contains("Remand") || longContent.contains("Resort") || longContent.contains("High") || longContent.contains("Court") || longContent.contains("Chief"))){ // content.equals("Devala")
						annEnd = anAnnNext.getEndNode();
					}else{
						break;
					}
				}else{	
					break;
				}
			}
			 
			i = j-1;
			
			String finalAnn = "none";
			
			try {
				finalAnn = doc.getContent().getContent(anAnn.getStartNode().getOffset(), annEnd.getOffset()).toString();
			}
			catch (InvalidOffsetException e) {
				e.printStackTrace();
			}
	  
			if(!(finalAnn.contains("Bulletin") || finalAnn.contains("Anti") || finalAnn.contains("Ministry") || finalAnn.contains("Council") || finalAnn.contains("none") || finalAnn.contains("Lanka") || finalAnn.equals("Sharia") || finalAnn.contains("Lankan") || finalAnn.contains("Indian") || finalAnn.contains("Human") || finalAnn.contains("Rights") || finalAnn.contains("Correspondent") || finalAnn.contains("and"))){	
					outputAS.add(anAnn.getStartNode(), annEnd, "CrimeLocation", features);
			}
		  }
	  }
	  catch (InvalidOffsetException e) {
        e.printStackTrace();
      }
   }
   }
}