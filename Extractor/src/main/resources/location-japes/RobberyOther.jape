Phase: RobberyOther
Input:  Lookup Token Date Currency JobTitle PointSeperator NotLocation Occupation PERSON IncorrectLocation Organization Location SubPerson Direction LOCATION EndSentence
Options: control = appelt

Rule: RobberyOther
Priority:50
((({Token.string == "arrested"}
|
{Token.string == "arresting"}
|
(({Token.string == "taken"}
|
{Token.string == "took"})
{Token.string == "before"}
{Token.string == "a"}
{Token.string == "magistrate"})
|
({Token.string == "taken"}
{Token.string == "into"}
{Token.string == "custody"})
|
({Token.string == "took"}
{Token.string == "into"}
{Token.string == "custody"})
|
({Token.string == "blocked"}
{Token.string == "the"}
{Token.string == "deportation"})
|
{Token.string == "explosives"}
|
{Token.string == "bomb"}
|
{Token.string == "blast"} 
|
{Token.string == "sentenced"}
|
{Token.string == "nabbed"}
|
{Token.string == "discovered"}
|
{Token.string == "attacked"}
|
(({Token.string == "attack"}
|
{Token.string == "attacks"})
{Token.string == "on"})
|
{Token.string == "remanded"}
|
{Token.string == "apprehended"}
|
{Token.string == "injured"}
|
({Token.string == "found"}
{Token.string == "with"}
{Token.string == "injuries"})
|
{Token.string == "raped"}
|
({Token.string == "sexual"}
{Token.string == "assault"}) 
|
({Token.string == "sexually"}
{Token.string == "assaulting"})
|
({Token.string == "sexually"}
{Token.string == "harassed"}) 
|
{Token.string == "abused"}
|
{Token.string == "brothel"}
|
{Token.string == "prostitution"}
|
{Token.string == "molesting"}
|
{Token.string == "molested"}
|
{Token.string == "torture"}
|
{Token.string == "tortured"}
|
{Token.string == "robbery"}
|
{Token.string == "rob"}
|
{Token.string == "robbed"}
|
{Token.string == "abducted"}
|
{Token.string == "abduction"}
|
{Token.string == "abductor"}
|
{Token.string == "kidnap"}
|
{Token.string == "kidnapped"}
|
{Token.string == "kidnapping"}
|
{Token.string == "alleged"}
|
{Token.string == "allegation"}
|
{Token.string == "altercation"}
|
{Token.string == "abscond"}
|
{Token.string == "absconded"}
|
{Token.string == "absconding"}
|
{Token.string == "prosecuted"}
|
{Token.string == "threatened"}
|
{Token.string == "shot"}
|
{Token.string == "shooting"}
|
({Token.string == "shot"}
{Token.string == "by"})
|
{Token.string == "raid"}
|
{Token.string == "raided"}
|
{Token.string == "counterfeit"}
|
{Token.string == "smuggle"}
|
{Token.string == "smuggled"}
|
{Token.string == "smuggling"}
|
{Token.string == "poisoning"}
|
({Token.string == "distributing"}
({Token.string == "the"})?
({Token.string == "drug"}
|
{Token.string == "drugs"}))
|
{Token.string == "ransacked"}
|
{Token.string == "assaulted"}
|
{Token.string == "hijacked"}
|
{Token.string == "seized"}
|
{Token.string == "stabbed"}
|
({Token.string == "incident"}
{Token.string == "occurred"})
|
({Token.string == "treasure"}
{Token.string == "hunting"})
|
({Token.string == "treasure"}
{Token.string == "hunt"})
|
{Token.string == "[Ee]thanol"}
|
{Token.string =~ "[Hh]eroin"}
|
{Token.string =~ "[Dd]rugs"}
|
{Token.string =~ "[Dd]rug"}
|
{Token.string == "ammunition"}
|
{Token.string == "arson"}
|
{Token.string == "bombing"}
|
{Token.string == "bullet"}
|
{Token.string == "bullets"}
|
{Token.string =~ "[Cc]annabis"}
|
{Token.string == "clash"}
|
{Token.string =~ "[Cc]ocaine"}
|
{Token.string == "contraband"}
|
{Token.string == "convict"}
|
{Token.string == "conviction"}
|
{Token.string == "culprit"}
|
{Token.string == "explosive"}
|
{Token.string == "explosion"}
|
{Token.string == "extort"}
|
{Token.string == "extorted"}
|
{Token.string == "extorting"}
|
{Token.string == "extortion"}
|
({Token.string == "broken"}
{Token.string == "into"})
|
({Token.string == "broke"}
{Token.string == "into"})
|
{Token.string == "extremist"}
|
{Token.string == "extremists"}
|
{Token.string == "firearm"}
|
{Token.string == "firearms"}
|
{Token.string == "fraud"}
|
{Token.string == "forensic"}
|
{Token.string == "forensics"}
|
{Token.string =~ "[Gg]anja"}
|
{Token.string == "grenade"}
|
{Token.string == "grenades"}
|
{Token.string == "gunfire"}
|
{Token.string == "gunshot"}
|
{Token.string == "harass"}
|
{Token.string == "harassed"}
|
{Token.string == "harassing"}
|
{Token.string == "hunter"}
|
{Token.string == "hunters"}
|
{Token.string == "illegally"}
|
{Token.string == "illegal"}
|
{Token.string == "injury"}
|
{Token.string == "interdict"}
|
{Token.string == "interdicted"}
|
{Token.string == "intoxicate"}
|
{Token.string == "intoxicating"}
|
{Token.string == "intruder"}
|
{Token.string == "intruders"}
|
{Token.string == "kidnapper"}
|
{Token.string == "knife"}
|
{Token.string =~ "[Nn]arcotic"}
|
{Token.string =~ "[Nn]arcotics"}
|
{Token.string == "pistol"}
|
{Token.string == "pornographic"}
|
{Token.string == "possession"}
|
{Token.string == "prosecute"}
|
{Token.string == "prosecuted"}
|
{Token.string == "prosecution"}
|
{Token.string == "prosecutor"}
|
{Token.string == "revolver"}
|
{Token.string == "rifle"}
|
{Token.string == "rob"}
|
{Token.string == "robbed"}
|
{Token.string == "robbing"}
|
{Token.string == "robber"}
|
{Token.string == "sleuth"}
|
{Token.string == "sleuthes"}
|
{Token.string == "smuggler"}
|
{Token.string == "stabbing"}
|
{Token.string == "steal"}
|
{Token.string == "stolen"}
|
{Token.string == "stealing"}
|
{Token.string == "surrender"}
|
{Token.string == "sword"}
|
{Token.string == "theft"}
|
{Token.string == "thief"}
|
{Token.string == "thieves"}
|
{Token.string == "turtle"}
|
{Token.string == "turtles"}
|
{Token.string == "tusk"}
|
{Token.string == "tusks"}
|
{Token.string == "unauthorised"}
|
{Token.string =~ "[Ww]allapatta"}
|
{Token.string == "weapon"}
|
{Token.string == "weapons"}
|
{Token.string == "wound"}
|
{Token.string == "wounds"}
|
{Token.string == "wounded"})

({Token.kind == "word"}
|
{Token.kind == "number"}
|
{Token.kind == "symbol"}
|
{Token.kind == "punctuation",!EndSentence.rule == endSentence})*

({Token.string == "at"}
|
{Token.string == "in", !NotLocation.rule == "notLoc"}
|
{Token.string == "near"}
|
({Token.string == "in"}
{Token.string == "the"}
{Token.string == "vicinity"}
{Token.string == "of"})
|
({Token.string == "in"}
{Token.string == "the"}
({Token.string == "area"}
|
{Token.string == "areas"})
{Token.string == "of"})
|
({Token.string == "coast"}
{Token.string == "of"})))
|
({Token.string == "seized"}
({Token.kind == "word"}
|
{Token.kind == "number"}
|
{Token.kind == "symbol"}
|
{Token.kind == "punctuation",!EndSentence.rule == endSentence})*
{Token.string == "from"})
|
({Token.string == "illegally"}
{Token.string == "travel"}
({Token.kind == "word"}
|
{Token.kind == "number"}
|
{Token.kind == "symbol"}
|
{Token.kind == "punctuation",!EndSentence.rule == endSentence})*
{Token.string == "from"})) 
  
	((({Token.string =~ "[Aa]"}
	|
	{Token.string =~ "[Aa]n"})
	|
	{Token.string =~ "[Tt]he"})?
	({Token.kind == word, Token.category == VBN})
	({Token.kind == word, Token.category == NN})
	({Token.string == "at"}
	|
	{Token.string == "in"}
	|
	{Token.string == "near"}
	|
	({Token.string == "in"}
	{Token.string == "the"}
	{Token.string == "vicinity"}
	{Token.string == "of"})))?

    	({Token.string =~ "[Tt]he"}
		|
		{Token.string =~ "[Aa]"}
		|
		{Token.string =~ "[Aa]n"})?
		({Token.kind == word, Token.category == JJ})?
		((
		 (
	      {Token.kind == word, Token.category == NNP, Token.orth == upperInitial, !Date.kind == date, !Currency.rule == type, !JobTitle.rule == JobTitle1, !Occupation.rule == title, !Lookup.majorType == jobTitle,  !IncorrectLocation, !Organization.orgType == company, !Location.locType == country, LOCATION}
		  ({Token.kind == punctuation, !Token.string == "."})?
	      {Token.kind == word, Token.category == NNP, Token.orth == upperInitial, !Date.kind == date, !Currency.rule == type, !JobTitle.rule == JobTitle1, !Occupation.rule == title, !Lookup.majorType == jobTitle,  !IncorrectLocation, !Organization.orgType == company, !Location.locType == country, LOCATION}
	      ({Token.kind == punctuation, !Token.string == "."})?
	      {Token.kind == word, Token.category == NNP, Token.orth == upperInitial, !Date.kind == date, !Currency.rule == type, !JobTitle.rule == JobTitle1, !Occupation.rule == title, !Lookup.majorType == jobTitle,  !IncorrectLocation, !Organization.orgType == company, !Location.locType == country, LOCATION}
		 )
		 |
		 (
	      {Token.kind == word, Token.category == NNP, Token.orth == upperInitial, !Date.kind == date, !Currency.rule == type, !JobTitle.rule == JobTitle1, !Occupation.rule == title, !Lookup.majorType == jobTitle,  !IncorrectLocation, !Organization.orgType == company, !Location.locType == country, LOCATION}
		  ({Token.kind == punctuation, !Token.string == "."})?
	      (
	       {Token.kind == word, Token.category == NNP, Token.orth == allCaps, !Date.kind == date, !Currency.rule == type, !JobTitle.rule == JobTitle1, !Occupation.rule == title, !Lookup.majorType == jobTitle,  !IncorrectLocation, !Organization.orgType == company, !Location.locType == country, LOCATION}
	       |
	       {Token.kind == word, Token.category == NNP, Token.orth == upperInitial, !Date.kind == date, !Currency.rule == type, !JobTitle.rule == JobTitle1, !Occupation.rule == title, !Lookup.majorType == jobTitle,  !IncorrectLocation, !Organization.orgType == company, !Location.locType == country, LOCATION}
	       |
	       {Token.kind == word, Token.category == NNPS, Token.orth == upperInitial, !Date.kind == date, !Currency.rule == type, !JobTitle.rule == JobTitle1, !Occupation.rule == title, !Lookup.majorType == jobTitle,  !IncorrectLocation, !Organization.orgType == company, !Location.locType == country, LOCATION}
	      )
		 )
    	 |
		 ({Token.kind == word, Token.category == NNP, Token.orth == upperInitial, !Date.kind == date, !Currency.rule == type, !JobTitle.rule == JobTitle1, !Occupation.rule == title, !Lookup.majorType == jobTitle,  !IncorrectLocation, !Organization.orgType == company, !Location.locType == country, LOCATION})
		)
		({Token.string == ","}
		|
		{Token.string == "and"})?
		(
			(
			 {Token.kind == word, Token.category == NNP, Token.orth == upperInitial, !Date.kind == date, !Currency.rule == type, !JobTitle.rule == JobTitle1, !Occupation.rule == title, !Lookup.majorType == jobTitle,  !IncorrectLocation, !Organization.orgType == company, !Location.locType == country, LOCATION}
			 {Token.kind == word, Token.category == NNP, Token.orth == upperInitial, !Date.kind == date, !Currency.rule == type, !JobTitle.rule == JobTitle1, !Occupation.rule == title, !Lookup.majorType == jobTitle,  !IncorrectLocation, !Organization.orgType == company, !Location.locType == country, LOCATION}
			 {Token.kind == word, Token.category == NNP, Token.orth == upperInitial, !Date.kind == date, !Currency.rule == type, !JobTitle.rule == JobTitle1, !Occupation.rule == title, !Lookup.majorType == jobTitle,  !IncorrectLocation, !Organization.orgType == company, !Location.locType == country, LOCATION}
			)
			|
		    (
			 {Token.kind == word, Token.category == NNP, Token.orth == upperInitial, !Date.kind == date, !Currency.rule == type, !JobTitle.rule == JobTitle1, !Occupation.rule == title, !Lookup.majorType == jobTitle,  !IncorrectLocation, !Organization.orgType == company, !Location.locType == country, LOCATION}
			 {Token.kind == word, Token.category == NNP, Token.orth == upperInitial, !Date.kind == date, !Currency.rule == type, !JobTitle.rule == JobTitle1, !Occupation.rule == title, !Lookup.majorType == jobTitle,  !IncorrectLocation, !Organization.orgType == company, !Location.locType == country, LOCATION}
			)
			|
			({Token.kind == word, Token.category == NNP, Token.orth == upperInitial, !Date.kind == date, !Currency.rule == type, !JobTitle.rule == JobTitle1, !Occupation.rule == title, !Lookup.majorType == jobTitle,  !IncorrectLocation, !Organization.orgType == company, !Location.locType == country, LOCATION})
		)?
    ):location
     ({Token.kind == punctuation, !Token.string == "."})?
--> 
{
	//get the location annotations in a list
	if(inputAS.get("CrimeLocation").isEmpty()){
   List annList = new ArrayList((AnnotationSet)bindings.get("location"));


   //sort the list by offset
   Collections.sort(annList, new OffsetComparator());

   //iterate through the matched annotations
   for(int i = 0; i < annList.size(); i++)
   {
      Annotation anAnn = (Annotation)annList.get(i);

      // check that the new annotation is not a categorical place
	  try {
		String content = doc.getContent().getContent(anAnn.getStartNode().getOffset(), anAnn.getEndNode().getOffset()).toString();
		  if (!(content.equals("Court") || content.equals("Police") || content.equals("Customs") || content.equals("Custom") || content.equals("Temple") || content.equals("Bank") || content.equals("Institute") || content.equals("Resort") || content.equals("International") || content.equals("Airport") || content.equals("University") || content.equals("Prison") || content.equals("Federal") || content.equals("City") || content.equals("Sri") || content.equals("Ceylon") || content.equals("Ealam") || content.equals("Remand") || content.equals("Navy") || content.equals("General") || content.equals(",") || content.equals("Military") || content.equals("Junction") || content.equals("District"))) // content.equals("Devala")
		  {
			FeatureMap features = Factory.newFeatureMap();
			features.put("location", "Robbery-Other");
			
			Node annEnd = anAnn.getEndNode();
			int j;
			
			for(j= i+1; j < annList.size(); j++){
				Annotation anAnnNext = (Annotation)annList.get(j);
				if(anAnnNext.getStartNode().getOffset() == annEnd.getOffset()+1 || anAnnNext.getStartNode().getOffset() == annEnd.getOffset()){
					String longContent = doc.getContent().getContent(anAnnNext.getStartNode().getOffset(), anAnnNext.getEndNode().getOffset()).toString();
					if (!(longContent.charAt(0) == ','  || longContent.contains("Military")  || longContent.contains("Remand") || longContent.contains("Resort") || longContent.contains("High") || longContent.contains("Court") || longContent.contains("Pradeshiya") || longContent.contains("District"))){ // content.equals("Devala")
						annEnd = anAnnNext.getEndNode();
					}else{
						break;
					}
				}else{	
					break;
				}
			}
			 
			i = j-1;
			
			String finalAnn = "none";
			
			try {
				finalAnn = doc.getContent().getContent(anAnn.getStartNode().getOffset(), annEnd.getOffset()).toString();
			}
			catch (InvalidOffsetException e) {
				e.printStackTrace();
			}
	  
			if(!(finalAnn.contains("Bulletin") || finalAnn.contains("Anti") || finalAnn.contains("Ministry") || finalAnn.contains("Council") || finalAnn.contains("none") || finalAnn.contains("Lanka") || finalAnn.equals("Sharia") || finalAnn.contains("Lankan") || finalAnn.contains("Indian") || finalAnn.contains("Human") || finalAnn.contains("Rights") || finalAnn.contains("Correspondent") || finalAnn.contains("and") || finalAnn.equals("National"))){	
					outputAS.add(anAnn.getStartNode(), annEnd, "CrimeLocation", features);
			}
		  }
	  }
	  catch (InvalidOffsetException e) {
        e.printStackTrace();
      }
   }
   }
}