Phase: Finalize
Input:  TempPerson
Options: control = appelt

Rule: Finalize
Priority:50
({TempPerson within TempPerson}
|
{TempPerson}):container
--> 
{
	List annList = new ArrayList((AnnotationSet)bindings.get("container"));

	//sort the list by offset
	Collections.sort(annList, new OffsetComparator());

	//iterate through the matched annotations
	for(int i = 0; i < annList.size(); i++)
	{
		Annotation anAnn = (Annotation)annList.get(i);

		FeatureMap features = Factory.newFeatureMap();
		features.put("type", "finalize");
		
		String finalAnn = "none";
			
		try {
			finalAnn = doc.getContent().getContent(anAnn.getStartNode().getOffset(), anAnn.getEndNode().getOffset()).toString();
		}
		catch (InvalidOffsetException e) {
			e.printStackTrace();
		}
		
		if(!(finalAnn.contains("Magistrate") || finalAnn.contains("magistrate") || finalAnn.contains("OIC") || finalAnn.contains("DIG") || finalAnn.contains("Judge") || finalAnn.contains("judge") || finalAnn.contains("Officer") || finalAnn.contains("officer") || finalAnn.contains("Counsel") || finalAnn.contains("counsel") || finalAnn.contains("Counsels") || finalAnn.contains("counsels") || finalAnn.contains("Spokesman") || finalAnn.contains("spokesman") || finalAnn.contains("CI") || finalAnn.contains("Europol") || finalAnn.contains("Eurojust") || finalAnn.contains("none"))){
			outputAS.add(anAnn.getStartNode(), anAnn.getEndNode(), "CrimePerson", features);
		}
	}
}